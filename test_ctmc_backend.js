const fs = require('fs');

// Read the CTMCSolver.m content
const ctmcContent = `%% CTMC Solver - Generated by SHIFTAI
% Modello: 4 stati, 5 transizioni
% Metodo: Transitorio
% Tempo: 100

% 1. Definisco lo spazio degli stati
states = 0:3;

% 2. Elenco delle transizioni [from to rate]
transitions = [
    1  2  0.0005;   % State 0 → State 1 with rate 0.0005
    1  4  1;   % State 0 → State 3 with rate 1
    4  3  1;   % State 3 → State 2 with rate 1
    3  4  1;   % State 2 → State 3 with rate 1
    3  1  1;   % State 2 → State 0 with rate 1
];

% 3. Costruisco il generatore Q
Q = buildGenerator(states, transitions);

% 4. Distribuzione iniziale
pi0 = [1 0 0 0];

% 5. Risoluzione CTMC

% Soluzione transitoria usando expm
t = 100;
pi_t_expm = solveCTMC(Q, pi0, t);
result = pi_t_expm;

% 6. Stampa risultati
fprintf("\\nDistribuzione transitoria a t=%.2f:\\n", t);
fprintf("π(t=%.2f) = %s\\n", t, mat2str(result, 6));

% 7. Salvataggio risultati
resultsFile = fullfile(pwd, 'output/results.mat');
save(resultsFile, 'result', 'Q', 'pi0', 'states', 'transitions');
fprintf("\\nRisultati salvati in: %s\\n", resultsFile);
`;

// Test payload for CTMC
const testPayload = {
  shyftaPath: 'C:\\CTMC',
  modelName: 'CTMCSolver',
  modelContent: ctmcContent,
  isCTMC: true
};

console.log('🧪 Testing CTMC backend with payload:');
console.log('   Path:', testPayload.shyftaPath);
console.log('   Model:', testPayload.modelName);
console.log('   Content length:', testPayload.modelContent.length);
console.log('   Is CTMC:', testPayload.isCTMC);

// Test the API
fetch('http://localhost:3001/api/matlab/execute-stream', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(testPayload)
})
.then(response => {
  console.log('📡 Response status:', response.status);
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  const reader = response.body.getReader();
  const decoder = new TextDecoder();
  
  function readStream() {
    reader.read().then(({ done, value }) => {
      if (done) {
        console.log('✅ Stream completed');
        return;
      }
      
      const chunk = decoder.decode(value);
      const lines = chunk.split('\n');
      
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          try {
            const data = JSON.parse(line.substring(6));
            console.log(`📊 Progress: ${data.progress}%`);
            console.log(`📝 Output: ${data.output?.slice(0, 100)}...`);
            
            if (data.success) {
              console.log('🎉 Success!', data);
            }
            if (data.error) {
              console.log('❌ Error:', data.error);
            }
          } catch (e) {
            console.log('📄 Raw data:', line);
          }
        }
      }
      
      readStream();
    });
  }
  
  readStream();
})
.catch(error => {
  console.error('💥 Test error:', error);
});

console.log('🔄 Test started, waiting for results...');