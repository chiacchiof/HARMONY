{"version":3,"file":"static/js/699.7ff74c08.chunk.js","mappings":"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","sources":["services/matlab-execution-service.ts"],"sourcesContent":["/**\r\n * Service for executing MATLAB commands via backend API\r\n * This handles the real MATLAB execution using Node.js child_process\r\n */\r\n\r\nexport interface MatlabExecutionRequest {\r\n  shyftaPath: string;\r\n  modelName: string;\r\n  modelContent: string;\r\n  zftaContent: string;\r\n  isCTMC?: boolean; // Flag to indicate CTMC execution vs SHyFTA\r\n}\r\n\r\nexport interface MatlabExecutionResponse {\r\n  success: boolean;\r\n  output?: string;\r\n  error?: string;\r\n  progress?: number;\r\n  exitCode?: number;\r\n  resultsPath?: string;\r\n}\r\n\r\nexport class MatlabExecutionService {\r\n  private static readonly API_BASE_URL = `http://${window.location.hostname}:3001/api`; // Backend server\r\n\r\n  /**\r\n   * Execute MATLAB simulation via backend API\r\n   */\r\n  static async executeMatlabSimulation(request: MatlabExecutionRequest): Promise<void> {\r\n    try {\r\n      console.log('üöÄ Sending MATLAB execution request to backend...');\r\n      \r\n      const response = await fetch(`${this.API_BASE_URL}/matlab/execute`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend API error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const result: MatlabExecutionResponse = await response.json();\r\n      \r\n      if (!result.success) {\r\n        throw new Error(result.error || 'MATLAB execution failed');\r\n      }\r\n\r\n      console.log('‚úÖ MATLAB execution completed successfully');\r\n      console.log('üìä Output:', result.output);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to execute MATLAB:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start MATLAB simulation with real-time progress monitoring\r\n   */\r\n  static async startMatlabWithMonitoring(\r\n    request: MatlabExecutionRequest,\r\n    onProgress: (progress: number, output: string) => void\r\n  ): Promise<void> {\r\n    try {\r\n      console.log('üîß Starting MATLAB with real-time monitoring...');\r\n\r\n      // Create abort controller for longer timeout on CTMC\r\n      const abortController = new AbortController();\r\n      const timeoutId = setTimeout(() => {\r\n        console.log('‚è∞ MATLAB execution timeout after 300 seconds');\r\n        abortController.abort();\r\n      }, 300000); // 300 second timeout for MATLAB execution (5 minutes for complex CTMC)\r\n      \r\n      // Use fetch with streaming for POST request with file content\r\n      const response = await fetch(`${this.API_BASE_URL}/matlab/execute-stream`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'text/event-stream',\r\n        },\r\n        body: JSON.stringify(request),\r\n        signal: abortController.signal\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend API error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const reader = response.body?.getReader();\r\n      if (!reader) {\r\n        throw new Error('Failed to get response stream reader');\r\n      }\r\n\r\n      return new Promise(async (resolve, reject) => {\r\n        const decoder = new TextDecoder();\r\n        let buffer = '';\r\n\r\n        try {\r\n          while (true) {\r\n            const { done, value } = await reader.read();\r\n            \r\n            if (done) {\r\n              console.log('üì° Stream ended');\r\n              clearTimeout(timeoutId); // Clear timeout when stream ends\r\n              break;\r\n            }\r\n\r\n            // Decode the chunk and add to buffer\r\n            buffer += decoder.decode(value, { stream: true });\r\n            \r\n            // Process complete lines\r\n            const lines = buffer.split('\\n');\r\n            buffer = lines.pop() || ''; // Keep incomplete line in buffer\r\n\r\n            for (const line of lines) {\r\n              if (line.startsWith('data: ')) {\r\n                try {\r\n                  const dataStr = line.substring(6); // Remove 'data: ' prefix\r\n                  if (dataStr.trim()) {\r\n                    const data: MatlabExecutionResponse = JSON.parse(dataStr);\r\n                    \r\n                    console.log('üì° Real-time update:', data);\r\n                    \r\n                    if (data.progress !== undefined) {\r\n                      onProgress(data.progress, data.output || '');\r\n                    }\r\n\r\n                    if (data.success) {\r\n                      console.log('üéâ MATLAB simulation completed!');\r\n                      clearTimeout(timeoutId); // Clear timeout on successful completion\r\n                      reader.releaseLock();\r\n                      resolve();\r\n                      return;\r\n                    }\r\n                    \r\n                    // Check for simulation failure with exit code\r\n                    if (data.hasOwnProperty('exitCode') && data.exitCode !== 0) {\r\n                      console.error('‚ùå MATLAB simulation failed with exit code:', data.exitCode);\r\n                      reader.releaseLock();\r\n                      reject(new Error(`MATLAB simulation failed (exit code: ${data.exitCode})`));\r\n                      return;\r\n                    }\r\n\r\n                    // Report errors immediately but don't stop streaming\r\n                    if (data.error && data.progress !== undefined) {\r\n                      console.error('‚ùå MATLAB execution error:', data.error);\r\n                      onProgress(data.progress, `‚ùå ERRORE: ${data.error}\\n${data.output || ''}`);\r\n                    }\r\n                    \r\n                    // Only reject on final error without progress\r\n                    if (data.error && data.progress === undefined) {\r\n                      console.error('‚ùå MATLAB execution error:', data.error);\r\n                      reader.releaseLock();\r\n                      reject(new Error(data.error));\r\n                      return;\r\n                    }\r\n                  }\r\n                } catch (parseError) {\r\n                  console.error('Failed to parse SSE data:', parseError, 'Line:', line);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          reader.releaseLock();\r\n          resolve();\r\n\r\n        } catch (streamError) {\r\n          console.error('‚ùå Stream reading error:', streamError);\r\n          clearTimeout(timeoutId);\r\n          reader.releaseLock();\r\n          \r\n          // Provide more specific error messages for common issues\r\n          if (streamError instanceof Error) {\r\n            if (streamError.name === 'AbortError') {\r\n              reject(new Error('L\\'analisi CTMC √® stata interrotta (timeout o cancellazione)'));\r\n            } else if (streamError.message && streamError.message.includes('BodyStreamBuffer')) {\r\n              reject(new Error('Errore di connessione durante l\\'analisi CTMC. Riprova.'));\r\n            } else {\r\n              reject(streamError);\r\n            }\r\n          } else {\r\n            reject(new Error('Errore sconosciuto durante l\\'analisi CTMC'));\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to start MATLAB monitoring:', error);\r\n      \r\n      // Provide user-friendly error messages\r\n      if (error instanceof Error) {\r\n        if (error.name === 'AbortError') {\r\n          throw new Error('L\\'analisi CTMC √® stata interrotta (timeout o cancellazione)');\r\n        } else if (error.message.includes('BodyStreamBuffer')) {\r\n          throw new Error('Errore di connessione durante l\\'analisi CTMC. Verifica che il backend sia attivo e riprova.');\r\n        } else if (error.message.includes('fetch')) {\r\n          throw new Error('Impossibile connettersi al backend MATLAB. Verifica che il server sia attivo sulla porta 3001.');\r\n        }\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if backend API is available\r\n   */\r\n  static async checkBackendAvailability(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${this.API_BASE_URL}/health`, {\r\n        method: 'GET',\r\n        signal: AbortSignal.timeout(10000) // 10 second timeout\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Backend API not available:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop running MATLAB simulation via backend API\r\n   */\r\n  static async stopMatlabSimulation(): Promise<boolean> {\r\n    try {\r\n      console.log('üõë Requesting MATLAB simulation stop...');\r\n      \r\n      const response = await fetch(`${this.API_BASE_URL}/matlab/stop`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Backend API error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        console.log('‚úÖ MATLAB simulation stop requested successfully');\r\n        console.log('üìù Message:', result.message);\r\n        return true;\r\n      } else {\r\n        console.error('‚ùå Failed to stop MATLAB simulation:', result.error);\r\n        return false;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to stop MATLAB simulation:', error);\r\n      return false;\r\n    }\r\n  }\r\n}"],"names":["MatlabExecutionService","executeMatlabSimulation","request","console","log","response","fetch","concat","this","API_BASE_URL","method","headers","body","JSON","stringify","ok","Error","status","statusText","result","json","success","error","output","startMatlabWithMonitoring","onProgress","_response$body","abortController","AbortController","timeoutId","setTimeout","abort","signal","reader","getReader","Promise","async","resolve","reject","decoder","TextDecoder","buffer","done","value","read","clearTimeout","decode","stream","lines","split","pop","line","startsWith","dataStr","substring","trim","data","parse","undefined","progress","releaseLock","hasOwnProperty","exitCode","parseError","streamError","name","message","includes","checkBackendAvailability","AbortSignal","timeout","warn","stopMatlabSimulation","window","location","hostname"],"sourceRoot":""}